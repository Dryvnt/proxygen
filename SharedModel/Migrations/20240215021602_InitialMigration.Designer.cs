// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharedModel.Model;

#nullable disable

namespace SharedModel.Migrations
{
    [DbContext(typeof(ProxygenContext))]
    [Migration("20240215021602_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("CardSearchRecord", b =>
                {
                    b.Property<Guid>("CardsId")
                        .HasColumnType("TEXT");

                    b.Property<int>("SearchRecordsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardsId", "SearchRecordsId");

                    b.HasIndex("SearchRecordsId");

                    b.ToTable("CardSearchRecord");
                });

            modelBuilder.Entity("SharedModel.Model.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CardLayout")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFunny")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<ulong>("SourceDigest")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Name");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("SharedModel.Model.Face", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Loyalty")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("ManaCost")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("OracleText")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Power")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("Toughness")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeLine")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.HasKey("CardId", "Name");

                    b.HasIndex("Name");

                    b.ToTable("Face");
                });

            modelBuilder.Entity("SharedModel.Model.SanitizedCardName", b =>
                {
                    b.Property<Guid>("CardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("CardId", "Name");

                    b.HasIndex("Name");

                    b.ToTable("SanitizedCardNames");
                });

            modelBuilder.Entity("SharedModel.Model.SearchRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnrecognizedCards")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("When")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SearchRecords");
                });

            modelBuilder.Entity("SharedModel.Model.UpdateStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StatusState")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UpdateStatuses");
                });

            modelBuilder.Entity("CardSearchRecord", b =>
                {
                    b.HasOne("SharedModel.Model.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModel.Model.SearchRecord", null)
                        .WithMany()
                        .HasForeignKey("SearchRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModel.Model.Face", b =>
                {
                    b.HasOne("SharedModel.Model.Card", "Card")
                        .WithMany("Faces")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("SharedModel.Model.SanitizedCardName", b =>
                {
                    b.HasOne("SharedModel.Model.Card", "Card")
                        .WithMany("SanitizedNames")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("SharedModel.Model.Card", b =>
                {
                    b.Navigation("Faces");

                    b.Navigation("SanitizedNames");
                });
#pragma warning restore 612, 618
        }
    }
}
